{
  "_args": [
    [
      {
        "raw": "mongoose-redis-cache@0.0.3",
        "scope": null,
        "escapedName": "mongoose-redis-cache",
        "name": "mongoose-redis-cache",
        "rawSpec": "0.0.3",
        "spec": "0.0.3",
        "type": "version"
      },
      "/Users/higordiego/Documents/node/api-cep"
    ]
  ],
  "_from": "mongoose-redis-cache@0.0.3",
  "_id": "mongoose-redis-cache@0.0.3",
  "_inCache": true,
  "_location": "/mongoose-redis-cache",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongoose-redis-cache@0.0.3",
    "scope": null,
    "escapedName": "mongoose-redis-cache",
    "name": "mongoose-redis-cache",
    "rawSpec": "0.0.3",
    "spec": "0.0.3",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-redis-cache/-/mongoose-redis-cache-0.0.3.tgz",
  "_shasum": "929c5e7617623159a3ae39c006dead14b9fe2cd2",
  "_shrinkwrap": null,
  "_spec": "mongoose-redis-cache@0.0.3",
  "_where": "/Users/higordiego/Documents/node/api-cep",
  "author": {
    "name": "Grey Ang"
  },
  "bugs": {
    "url": "https://github.com/conancat/mongoose-redis-cache/issues"
  },
  "dependencies": {
    "redis": "~0.8.2",
    "underscore": "~1.4.4"
  },
  "description": "Plugin to cache Mongoose MongoDB query results in Redis",
  "devDependencies": {
    "async": "~0.2.5",
    "mocha": "~1.8.1",
    "mongoose": "~3.5.7"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "929c5e7617623159a3ae39c006dead14b9fe2cd2",
    "tarball": "https://registry.npmjs.org/mongoose-redis-cache/-/mongoose-redis-cache-0.0.3.tgz"
  },
  "homepage": "https://github.com/conancat/mongoose-redis-cache#readme",
  "keywords": [
    "mongodb",
    "mongoose",
    "redis",
    "cache"
  ],
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "name": "conancat",
      "email": "conancat@gmail.com"
    }
  ],
  "name": "mongoose-redis-cache",
  "optionalDependencies": {},
  "readme": "# mongoose-redis-cache\n\nPlugin to cache Mongoose MongoDB query results in Redis. Lean DB queries, at least 300% faster! \n\n## How to use\nFirst, the usual: \n\n    npm install mongoose-redis-cache\n\nThen, \n\n    Setup mongoose connect as usual: \n\n       var mongoose = require(\"mongoose\");\n       var mongooseRedisCache = require(\"mongoose-redis-cache\");\n       mongoose.connect(\"mongodb://localhost/mongoose-redis-test\")\n\n    Create your schemas as usual: \n\n       var ExampleSchema = new Schema(function(){\n          field1: String\n          field2: Number\n          field3: Date\n       });\n     \n    Enable redisCache on the schema! \n       \n       REQUIRED: Enable Redis caching on this schema by specifying\n\n           ExampleSchema.set('redisCache', true)\n\n       OPTIONAL: Change the time for the cache of this schema. Defaults to 60 seconds. \n     \n           ExampleSchema.set('expires', 30)\n\n    Register the schema as usual: \n         \n         Example = mongoose.model('Example', ExampleSchema)\n\n    Setup your mongooseCache options:\n\n        # If you're running this locally, \n        mongooseRedisCache(mongoose)\n\n        # Or if you're running a remote Redis DB\n        mongooseRedisCache(mongoose, {\n           host: \"redisHost\",\n           port: \"redisPort\",\n           pass: \"redisPass\",\n           options: \"redisOptions\"\n         })\n     \n    Make a query as usual:\n         \n        query = Example.find({}) \n        query.where(\"field1\", \"foo\")\n        query.where(\"field2\").gte(30)\n        query.lean()  mongooseRedisCache only works for query.lean() queries!\n        query.exec(function(err, result){\n            Do whatever here! \n        });\n\nCheck out the test example for more information. \n\n## Test results: \n\n    =========================\n    Mongoose-Redis Cache Test\n    =========================\n    Total items in DB: 30000\n    Total number of queries per round: 20\n    Total number of rounds: 30\n\n    Generating 30000 mocks...\n\n    --------------------------------\n    Test query without Redis caching\n    --------------------------------\n    Begin executing queries without caching\n    ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․\n\n    Total time for 30 test rounds: 12620ms\n    Average time for each round: 420.67ms\n\n    --------------------------------\n    Test query with Redis caching\n    --------------------------------\n    Begin executing queries with Redis caching\n    ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․\n\n    Total time for 30 test rounds: 3618ms\n    Average time for each round: 120.60ms\n    ------------\n    CONCLUSION\n    ------------\n    Caching with Redis makes Mongoose lean queries faster by 9002 ms.\n    That's 348.81% faster!  \n\n\n    End tests. \n    Wiping DB and exiting\n\n## How this works\n\n### What is a Mongoose `lean` query? \n\n[Mongoose](http://mongoosejs.com), the MongoDB ORM for NodeJS has an awesome feature which casts each document \nas a Mongoose [model](http://mongoosejs.com/docs/models.html). This allows awesome features like being able to call `model.save()` or `model.remove()` on each document directly, which makes coding much easier. \n\nAt the same time, Mongoose also casts each value in every document returned from MongoDB to their [schema types](http://mongoosejs.com/docs/guide.html), which makes sure your database value types stays consistent. \n\nHowever, sometimes in situations where we need to READ a lot of data and have no intentions of doing anything to the \ndocument, we can call [query.lean()](http://mongoosejs.com/docs/api.html#query_Query-lean) when constructing \nour queries to remove the step which casts the documents into models. Documents are returned as normal Javascript \nobjects without the Model constructor functions, and values are not casted. This speeds things up considerably. \n\n### Caching with Redis\n\nWhat if we want to speed things up even faster? \n\nIn these situations where we don't need Mongoose model functionalities, we may want to ramp out our reading speed \nhigher by caching data in Redis.\n\nRedis is awesome for caching data. By caching our MongoDB results in Redis, we can get at least 300% increase in \nspeed when reading the data. This is AFTER indexing in MongoDB. \n\nCool for high-volume data reading! \n\n## API\n\n### Setting up\n\n    # If you're running this locally, \n    mongooseRedisCache(mongoose)\n\n    # Or if you're running a remote Redis DB\n    mongooseRedisCache(mongoose, {\n       host: \"redisHost\",\n       port: \"redisPort\",\n       pass: \"redisPass\",\n       options: \"redisOptions\"\n     })\n\n### redisCache: Boolean \n\n    ExampleSchema.set('redisCache', true)\n\nREQUIRED\nCall this function on whatever collection you want to cache. You don't have to use this on every collection, \nright? Pick and choose your collections wisely, you shall. \n\n### expires: Number\n\n    ExampleSchema.set('expires', 30)\n\nOPTIONAL\nSet the expiry time for the Redis key in seconds. Defaults to 60. \n\n\n### query.lean()\n\n    query = Example.find({})\n    query.lean()\n    query.exec(function(err, results){\n      # Your results here #\n    })\n\nREQUIRED\nJust a reminder. Be sure to call this whenever you want the results to be cached! More info\nabout [query.lean()](http://mongoosejs.com/docs/api.html#query_Query-lean) here.\n\nYeah, that's it. What else did you expect? Meh. \n\n## How to Run Test\n\nTry testing this on your machine and let me know how it went for you! \n\nThe usual jazz: \n\n    # Clone em!\n    git clone https://github.com/conancat/mongoose-redis-cache.git\n    \n    # Install those packages\n    cd mongoose-redis-cache\n    npm install\n\n    # If you don't have Mocha installed already\n    npm install mocha -g \n\n    # Yeah, just get in there and get on it\n    cd tests\n    mocha\n\n### How the tests are run\n\n#### Mock data\nWe generate a set number of mock data in the DB (defaults to 30000 items). \nEach item contains a random person's name, some arbitary number as random data, a date, and \nn array for the person's friend.\n\nFor testing purposes, we also called `ensureIndex()` on MongoDB to make sure we index\nthe field we want to query. \n\n#### Execute test rounds\nFor every round we query the database for all the names (defaults to 20 of them),\nand tracks the amount of time required to return the data. Each query returns around 1100 documents per call. \nWe run these same queries with and without Redis caching, for 20 rounds. Then we average out the time \nneeded to return the data. \n\nAll queries are query.lean(), meaning all documents returned are NOT casted as Mongoose models.\nThis gives us fair comparison between Redis caching and direct MongoDB queries. \n\n## These awesome people!\n\n* [mongoose](https://github.com/LearnBoost/mongoose)\n* [node-redis](https://github.com/mranney/node_redis)\n\n## Contact\n\nLet's talk! I'm on [Twitter](https://twitter.com/conancat), [Reddit](http://www.reddit.com/user/conancat), or you can email me at conancat@gmail.com. \n\n",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/conancat/mongoose-redis-cache.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.0.3"
}
